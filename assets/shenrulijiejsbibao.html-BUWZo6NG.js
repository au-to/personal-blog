import{_ as s,c as a,a as p,o as t}from"./app-D4UOOi8i.js";const e={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<p>在 JavaScript 中，闭包 (Closure) 是一个我们经常听到，甚至可能在不经意间就用到的概念。但要真正深入理解它，并能自如地运用它，就需要我们花点时间去探索其背后的原理。很多开发者可能认为闭包就是“函数能记住它被创建时的环境”，这没错，但闭包的强大和微妙之处远不止于此。</p><h3 id="什么是词法作用域-闭包的基石" tabindex="-1"><a class="header-anchor" href="#什么是词法作用域-闭包的基石"><span>什么是词法作用域？闭包的基石</span></a></h3><p>在理解闭包之前，我们必须先掌握 <strong>词法作用域 (Lexical Scoping)</strong>，也叫静态作用域。</p><p>简单来说，词法作用域意味着<strong>函数的作用域在函数定义的时候就已经决定了，而不是在函数调用的时候</strong>。无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> outerVar <span class="token operator">=</span> <span class="token string">&quot;我在外部函数！&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outerVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// innerFunction 可以访问 outerVar</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> innerFunction<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> myInnerFunction <span class="token operator">=</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">myInnerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &quot;我在外部函数！&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>innerFunction</code> 在 <code>outerFunction</code> 内部定义。因此，<code>innerFunction</code> 的词法作用域包含了 <code>outerFunction</code> 的作用域。即使 <code>outerFunction</code> 执行完毕并返回了 <code>innerFunction</code> (此时 <code>outerFunction</code> 的执行上下文原则上已经销毁了)，<code>myInnerFunction</code> (即 <code>innerFunction</code>) 依然能够访问 <code>outerVar</code>。</p><p>这就是词法作用域在起作用。<code>innerFunction</code> “记住”了它被定义时的词法环境。</p><hr><h3 id="那么-到底什么是闭包" tabindex="-1"><a class="header-anchor" href="#那么-到底什么是闭包"><span>那么，到底什么是闭包？</span></a></h3><p>基于词法作用域，我们可以这样定义闭包：</p><p><strong>闭包是指那些能够访问自由变量的函数。</strong> 这里的“自由变量”是指在函数中使用的，但既不是函数参数也不是函数的局部变量。换句话说，这些变量位于定义该函数的外部作用域中。</p><p><strong>更通俗地说，当一个函数能够记住并访问它所在的词法作用域，即使它在其词法作用域之外执行时，这就产生了闭包。</strong></p><p>在上面的例子中，<code>myInnerFunction</code> 就是一个闭包。它“关闭”了对 <code>outerVar</code> 的访问权限。</p><p><strong>闭包的核心组成：</strong></p><ol><li><strong>函数本身</strong></li><li><strong>创建该函数时所处的词法环境</strong> (包括该环境中的所有局部变量)</li></ol><hr><h3 id="闭包是如何工作的-作用域链的魔法" tabindex="-1"><a class="header-anchor" href="#闭包是如何工作的-作用域链的魔法"><span>闭包是如何工作的？作用域链的魔法</span></a></h3><p>当一个函数被创建时，JavaScript 引擎会为其创建一个作用域链 (Scope Chain)。这个作用域链是一个对象列表，用于变量查找。</p><ol><li><strong>函数自身的活动对象 (Activation Object)</strong>：包含函数的命名参数、局部变量和 <code>arguments</code> 对象。</li><li><strong>外部函数的作用域对象</strong>：如果函数是嵌套的，它会包含其外部函数的作用域对象。</li><li><strong>全局作用域对象 (Global Object)</strong>：作用域链的顶端。</li></ol><p>当 <code>innerFunction</code> 被调用时，它需要访问 <code>outerVar</code>。JavaScript 引擎会：</p><ol><li>首先在 <code>innerFunction</code> 自己的作用域中查找 <code>outerVar</code>。没找到。</li><li>接着沿着作用域链向上，到 <code>outerFunction</code> 的作用域中查找。找到了！</li></ol><p>即使 <code>outerFunction</code> 已经执行完毕，其作用域对象（包含 <code>outerVar</code>）仍然被闭包 <code>innerFunction</code> 引用着，因此不会被垃圾回收机制回收。这就是闭包能够“记住”外部变量的秘密。</p><hr><h3 id="闭包的常见应用场景" tabindex="-1"><a class="header-anchor" href="#闭包的常见应用场景"><span>闭包的常见应用场景</span></a></h3><p>理解了闭包是什么以及它如何工作，我们来看看它在实际开发中的强大用途。</p><ol><li><p><strong>数据封装和私有变量 (Data Encapsulation and Private Variables)</strong></p><p>JavaScript 本身没有像 Java 或 C++ 那样的 <code>private</code> 关键字来创建私有成员。但闭包提供了一种实现类似功能的方式。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// count 是一个“私有”变量</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      count<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">getCount</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> count<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> counter1 <span class="token operator">=</span> <span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">counter1<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span></span>
<span class="line">counter1<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span></span>
<span class="line"><span class="token comment">// console.log(counter1.count); // 错误！无法直接访问 count</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> counter2 <span class="token operator">=</span> <span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// counter2 有自己的 count，与 counter1 独立</span></span>
<span class="line">counter2<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，变量 <code>count</code> 只能通过返回对象中的方法来访问和修改，外部无法直接触及 <code>count</code>，从而实现了数据的封装和保护。</p></li><li><p><strong>函数工厂 (Function Factories)</strong></p><p>闭包可以用来创建特定功能的函数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">createMultiplier</span><span class="token punctuation">(</span><span class="token parameter">factor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> number <span class="token operator">*</span> factor<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">createMultiplier</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> triple <span class="token operator">=</span> <span class="token function">createMultiplier</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 10</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">triple</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 15</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createMultiplier</code> 返回的函数都是闭包，它们分别“记住”了传递给 <code>createMultiplier</code> 的 <code>factor</code> 值。</p></li><li><p><strong>回调函数和事件处理器 (Callbacks and Event Handlers)</strong></p><p>在异步编程中，例如事件监听或 <code>setTimeout</code>，闭包非常有用，因为它们可以保持对外部状态的引用。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">setupButtonHandler</span><span class="token punctuation">(</span><span class="token parameter">buttonId<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>buttonId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>button<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 这个匿名函数是一个闭包</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 它可以访问外部的 message 变量</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setupButtonHandler</span><span class="token punctuation">(</span><span class="token string">&#39;myButton&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;按钮被点击了！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当按钮被点击时，即使 <code>setupButtonHandler</code> 函数早已执行完毕，事件处理函数（闭包）仍然能够访问并使用 <code>message</code> 变量。</p></li><li><p><strong>模块化 (Module Pattern)</strong></p><p>在 ES6 模块出现之前，闭包是实现模块化开发模式的主要方式之一。它允许我们创建拥有私有状态和公共接口的模块。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 私有变量和函数</span></span>
<span class="line">  <span class="token keyword">const</span> privateVar <span class="token operator">=</span> <span class="token string">&quot;我是私有的&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;调用了私有函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 公共接口</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">publicVar</span><span class="token operator">:</span> <span class="token string">&quot;我是公共的&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">publicFunction</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;调用了公共函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问模块内的私有成员</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>privateVar<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 立即执行函数表达式 (IIFE)</span></span>
<span class="line"></span>
<span class="line">myModule<span class="token punctuation">.</span><span class="token function">publicFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 输出:</span></span>
<span class="line"><span class="token comment">// 调用了公共函数</span></span>
<span class="line"><span class="token comment">// 调用了私有函数</span></span>
<span class="line"><span class="token comment">// 我是私有的</span></span>
<span class="line"><span class="token comment">// console.log(myModule.privateVar); // 错误，无法访问</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h3 id="使用闭包的注意事项" tabindex="-1"><a class="header-anchor" href="#使用闭包的注意事项"><span>使用闭包的注意事项</span></a></h3><p>虽然闭包非常强大，但在使用时也需要注意一些潜在问题：</p><ol><li><p><strong>内存消耗 (Memory Consumption)</strong></p><p>因为闭包会使其外部函数的变量对象一直保存在内存中，所以如果过度使用闭包，或者闭包本身引用了非常大的对象，可能会导致比预期更高的内存消耗。尤其是在一些老旧的浏览器或对性能要求极高的场景下需要特别注意。 不过，现代 JavaScript 引擎在垃圾回收方面做了很多优化，通常情况下不必过分担心，但理解其机制总是有益的。</p></li><li><p><strong>循环中的闭包 (Closures in Loops)</strong></p><p>这是一个经典的闭包陷阱，尤其是在使用 <code>var</code> 声明循环变量时。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">createFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> funcs<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> functions <span class="token operator">=</span> <span class="token function">createFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">functions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 3</span></span>
<span class="line">functions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 3</span></span>
<span class="line">functions<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么都是 3？因为循环中创建的三个函数闭包共享了同一个词法环境，而在这个环境中，变量 <code>i</code> 的最终值是 3 (循环结束条件)。当这些函数被调用时，它们访问的是 <code>i</code> 当前的值。</p><p><strong>解决方案：</strong></p><ul><li><strong>使用 IIFE (立即执行函数表达式)</strong>:<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">createFunctionsIIFE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">saved_i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// IIFE 创建新的作用域</span></span>
<span class="line">      funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>saved_i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把当前的 i 传进去</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> funcs<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> functionsIIFE <span class="token operator">=</span> <span class="token function">createFunctionsIIFE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">functionsIIFE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0</span></span>
<span class="line">functionsIIFE<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span></span>
<span class="line">functionsIIFE<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>使用 <code>let</code> 或 <code>const</code> (ES6)</strong>: <code>let</code> 和 <code>const</code> 具有块级作用域，它们为循环的每次迭代创建一个新的词法环境。<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">createFunctionsLet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// let 会为每次迭代创建新的 i</span></span>
<span class="line">    funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> funcs<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> functionsLet <span class="token operator">=</span> <span class="token function">createFunctionsLet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">functionsLet<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0</span></span>
<span class="line">functionsLet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span></span>
<span class="line">functionsLet<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>这是目前最简洁和推荐的做法。</li></ul></li></ol><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>闭包是 JavaScript 中一个基础且强大的特性。它源于词法作用域，使得函数能够“记住”并持续访问其定义时的环境。</p><p><strong>核心要点：</strong></p><ul><li>闭包让函数可以访问定义时的外部作用域变量。</li><li>即使外部函数已经执行完毕，只要闭包存在，相关的外部变量就不会被回收。</li><li>闭包广泛应用于数据封装、函数工厂、回调、模块化等场景。</li><li>注意闭包可能带来的内存问题和在循环中的经典陷阱。</li></ul><p>真正理解闭包，能够帮助我们写出更优雅、更健壮、更模块化的 JavaScript 代码。</p>`,36)]))}const i=s(e,[["render",c]]),u=JSON.parse('{"path":"/blogs/qianduan/shenrulijiejsbibao.html","title":"深入理解javaScript闭包","lang":"en-US","frontmatter":{"title":"深入理解javaScript闭包","date":"2024/10/24","tags":["JavaScript"],"categories":["前端"]},"headers":[{"level":3,"title":"什么是词法作用域？闭包的基石","slug":"什么是词法作用域-闭包的基石","link":"#什么是词法作用域-闭包的基石","children":[]},{"level":3,"title":"那么，到底什么是闭包？","slug":"那么-到底什么是闭包","link":"#那么-到底什么是闭包","children":[]},{"level":3,"title":"闭包是如何工作的？作用域链的魔法","slug":"闭包是如何工作的-作用域链的魔法","link":"#闭包是如何工作的-作用域链的魔法","children":[]},{"level":3,"title":"闭包的常见应用场景","slug":"闭包的常见应用场景","link":"#闭包的常见应用场景","children":[]},{"level":3,"title":"使用闭包的注意事项","slug":"使用闭包的注意事项","link":"#使用闭包的注意事项","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1727184765000,"updatedTime":1749881065000,"contributors":[{"name":"Ryan","email":"2996442165@qq.com","commits":1}]},"filePathRelative":"blogs/前端/深入理解js闭包.md"}');export{i as comp,u as data};
