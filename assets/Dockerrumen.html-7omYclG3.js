import{_ as i,c as t,a as l,b as s,d as e,e as o,r as p,o as c}from"./app-D4UOOi8i.js";const r={},d={href:"https://docs.docker.com/desktop/install/mac-install/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://docs.docker.com/desktop/install/windows-install/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer"};function m(v,n){const a=p("ExternalLinkIcon");return c(),t("div",null,[n[9]||(n[9]=l('<h2 id="什么是-docker" tabindex="-1"><a class="header-anchor" href="#什么是-docker"><span>什么是 Docker？</span></a></h2><p>在深入学习之前，我们先简单理解一下 <strong>Docker</strong> 是什么。</p><p>想象一下，你开发了一个应用程序，它在你的电脑上运行得好好的。但当你把它部署到另一台电脑（比如服务器）上时，却突然无法运行了，或者出现各种奇奇怪怪的问题。这通常是因为两台电脑的环境（操作系统、库文件、依赖项等）不完全一致造成的。</p><p><strong>Docker 的出现就是为了解决这个问题。</strong> 它像是一个“打包机”，能把你的应用程序及其所有依赖项（代码、运行时环境、系统工具、系统库等）全部打包成一个独立的、可移植的“容器”（Container）。这个容器可以在任何安装了 Docker 的机器上运行，并且运行结果都是一致的，因为它自带了所有必要的环境。</p><p>你可以把容器想象成一个轻量级的虚拟机，但它比虚拟机更高效、启动更快。</p><h2 id="docker-的核心概念" tabindex="-1"><a class="header-anchor" href="#docker-的核心概念"><span>Docker 的核心概念</span></a></h2><p>在开始动手之前，了解几个 Docker 的核心概念非常重要：</p><ul><li><strong>镜像 (Image)</strong>：镜像是一个只读的模板，包含了创建 Docker 容器所需的所有指令、应用程序、库、配置文件等。可以把它看作是容器的“蓝图”或“模具”。比如，你可以有一个 Ubuntu 镜像，或者一个包含了 Node.js 运行环境的镜像。</li><li><strong>容器 (Container)</strong>：容器是镜像的运行实例。你可以从一个镜像创建多个容器，每个容器都是相互隔离的、独立的运行环境。容器是轻量级、可移植且可执行的。</li><li><strong>Dockerfile</strong>：Dockerfile 是一个文本文件，包含了一系列指令，用来自动化构建 Docker 镜像。你可以编写 Dockerfile 来定义你的应用程序如何被打包成一个镜像。</li><li><strong>Docker Hub</strong>：Docker Hub 是一个官方的 Docker 镜像仓库，里面包含了大量的公共镜像，你可以直接下载使用。同时，你也可以将自己构建的镜像上传到 Docker Hub，方便分享和管理。</li></ul><h2 id="快速上手-docker-三步走" tabindex="-1"><a class="header-anchor" href="#快速上手-docker-三步走"><span>快速上手 Docker：三步走</span></a></h2><p>接下来，让我们来实际操作一下，快速上手 Docker！</p><h3 id="第一步-安装-docker" tabindex="-1"><a class="header-anchor" href="#第一步-安装-docker"><span>第一步：安装 Docker</span></a></h3><p>首先，需要在你的电脑上安装 Docker。Docker 官方提供了详细的安装指南，根据你的操作系统选择对应的安装方式：</p>',12)),s("ul",null,[s("li",null,[n[1]||(n[1]=s("strong",null,"macOS",-1)),n[2]||(n[2]=e(": 访问 ",-1)),s("a",d,[n[0]||(n[0]=e("Docker Desktop for Mac",-1)),o(a)])]),s("li",null,[n[4]||(n[4]=s("strong",null,"Windows",-1)),n[5]||(n[5]=e(": 访问 ",-1)),s("a",u,[n[3]||(n[3]=e("Docker Desktop for Windows",-1)),o(a)])]),s("li",null,[n[7]||(n[7]=s("strong",null,"Linux",-1)),n[8]||(n[8]=e(": 访问 ",-1)),s("a",k,[n[6]||(n[6]=e("Docker Engine for Linux",-1)),o(a)])])]),n[10]||(n[10]=l(`<p>安装完成后，打开命令行工具（Mac/Linux 是终端，Windows 是 PowerShell 或 CMD），输入以下命令检查 Docker 是否安装成功：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token parameter variable">--version</span></span>
<span class="line"><span class="token function">docker</span> run hello-world</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果看到 Docker 的版本信息，并且 <code>docker run hello-world</code> 命令成功运行并输出了“Hello from Docker!”的信息，说明 Docker 已经成功安装并运行了。</p><h3 id="第二步-运行你的第一个-docker-容器" tabindex="-1"><a class="header-anchor" href="#第二步-运行你的第一个-docker-容器"><span>第二步：运行你的第一个 Docker 容器</span></a></h3><p>现在我们来运行一个简单的 Nginx Web 服务器，感受一下 Docker 的魔力。</p><p>在命令行中输入：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">--name</span> my-nginx nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>解释一下这个命令：</p><ul><li><code>docker run</code>: 这是运行 Docker 容器的命令。</li><li><code>-d</code>: 表示“detached”模式，让容器在后台运行，不会占用你的命令行界面。</li><li><code>-p 80:80</code>: 这是端口映射。它将容器内部的 80 端口映射到你主机上的 80 端口。这样，你就可以通过访问你主机的 80 端口来访问 Nginx 服务。</li><li><code>--name my-nginx</code>: 给你的容器指定一个易于记忆的名字，这里是 <code>my-nginx</code>。</li><li><code>nginx</code>: 这是我们要运行的镜像名称。Docker 会自动从 Docker Hub 下载 <code>nginx</code> 镜像（如果本地没有的话）。</li></ul><p>运行完这条命令后，你应该会看到一串很长的字符串，那是容器的 ID。</p><p>现在，打开你的浏览器，访问 <code>http://localhost</code>。你应该能看到 Nginx 的欢迎页面。</p><p>要停止并删除这个容器，你可以执行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> stop my-nginx</span>
<span class="line"><span class="token function">docker</span> <span class="token function">rm</span> my-nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>docker stop my-nginx</code>: 停止名为 <code>my-nginx</code> 的容器。</li><li><code>docker rm my-nginx</code>: 删除名为 <code>my-nginx</code> 的容器。</li></ul><h3 id="第三步-构建你自己的-docker-镜像" tabindex="-1"><a class="header-anchor" href="#第三步-构建你自己的-docker-镜像"><span>第三步：构建你自己的 Docker 镜像</span></a></h3><p>现在，我们来尝试构建一个简单的 Node.js 应用程序的 Docker 镜像。</p><ol><li><p><strong>创建一个项目目录</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> my-node-app</span>
<span class="line"><span class="token builtin class-name">cd</span> my-node-app</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>创建 <code>index.js</code> 文件</strong>： 在这个文件中写入一个简单的 Node.js Web 服务器：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// index.js</span></span>
<span class="line"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> hostname <span class="token operator">=</span> <span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 监听所有网络接口</span></span>
<span class="line"><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from Docker Node.js App!\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Server running at http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hostname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>创建 <code>Dockerfile</code> 文件</strong>： 在 <code>my-node-app</code> 目录下创建一个名为 <code>Dockerfile</code> 的文件（注意没有文件扩展名），并写入以下内容：</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token comment"># 使用官方 Node.js LTS 镜像作为基础镜像</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> node:lts-alpine</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 设置工作目录</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 将当前目录下的所有文件复制到容器的 /app 目录</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> . .</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 安装依赖 (如果你的项目有 package.json 和 node_modules)</span></span>
<span class="line"><span class="token comment"># RUN npm install</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 暴露容器的 3000 端口</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">EXPOSE</span> 3000</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义容器启动时运行的命令</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;node&quot;</span>, <span class="token string">&quot;index.js&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释一下 <code>Dockerfile</code> 中的指令：</p><ul><li><code>FROM node:lts-alpine</code>: 指定基础镜像。我们使用 Node.js 的 LTS 版本（长期支持版），基于 Alpine Linux，它非常小巧。</li><li><code>WORKDIR /app</code>: 设置容器内的工作目录为 <code>/app</code>。</li><li><code>COPY . .</code>: 将当前目录（你的 <code>my-node-app</code> 目录）下的所有文件复制到容器内的 <code>/app</code> 目录。</li><li><code>EXPOSE 3000</code>: 声明容器会监听 3000 端口。这只是一个声明，要让外部访问还需要在 <code>docker run</code> 时进行端口映射。</li><li><code>CMD [&quot;node&quot;, &quot;index.js&quot;]</code>: 定义容器启动时要执行的命令。</li></ul></li><li><p><strong>构建 Docker 镜像</strong>： 在 <code>my-node-app</code> 目录下，打开命令行，执行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> my-node-app <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>docker build</code>: 构建 Docker 镜像的命令。</li><li><code>-t my-node-app</code>: 给你构建的镜像指定一个标签（tag），这里是 <code>my-node-app</code>。</li><li><code>.</code>: 表示 Dockerfile 所在路径为当前目录。</li></ul><p>如果一切顺利，你会看到 Docker 开始构建镜像的过程，最后会显示成功构建的信息。</p></li><li><p><strong>运行你构建的镜像</strong>： 现在，从你刚刚构建的镜像运行一个容器：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:3000 <span class="token parameter variable">--name</span> my-running-app my-node-app</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里我们将主机的 8080 端口映射到容器的 3000 端口。</p><p>打开浏览器，访问 <code>http://localhost:8080</code>，你应该能看到“Hello from Docker Node.js App!”的信息！</p><p>同样，停止并删除容器：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> stop my-running-app</span>
<span class="line"><span class="token function">docker</span> <span class="token function">rm</span> my-running-app</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="常用-docker-命令" tabindex="-1"><a class="header-anchor" href="#常用-docker-命令"><span>常用 Docker 命令</span></a></h2><p>掌握这些常用命令，可以提高你使用 Docker 的效率：</p><ul><li><code>docker images</code>: 列出本地所有的 Docker 镜像。</li><li><code>docker ps</code>: 列出所有正在运行的容器。</li><li><code>docker ps -a</code>: 列出所有容器（包括已停止的）。</li><li><code>docker stop &lt;容器ID或名称&gt;</code>: 停止一个运行中的容器。</li><li><code>docker rm &lt;容器ID或名称&gt;</code>: 删除一个已停止的容器。</li><li><code>docker rmi &lt;镜像ID或名称&gt;</code>: 删除一个本地镜像。</li><li><code>docker logs &lt;容器ID或名称&gt;</code>: 查看容器的日志输出。</li><li><code>docker exec -it &lt;容器ID或名称&gt; bash</code>: 进入正在运行的容器内部进行交互式操作。</li></ul><h2 id="接下来你可以学习什么" tabindex="-1"><a class="header-anchor" href="#接下来你可以学习什么"><span>接下来你可以学习什么？</span></a></h2><ul><li><strong>Docker Compose</strong>: 用于定义和运行多容器 Docker 应用程序的工具。当你的项目需要多个服务（如 Web 服务器、数据库、缓存等）协同工作时，Docker Compose 会非常有帮助。</li><li><strong>数据卷 (Volumes)</strong>: 如何在容器和主机之间持久化数据。</li><li><strong>网络 (Networking)</strong>: 容器之间如何进行通信。</li><li><strong>私有仓库 (Private Registry)</strong>: 搭建自己的 Docker 镜像仓库。</li><li><strong>Docker Swarm / Kubernetes</strong>: 用于容器编排和管理大规模容器集群的工具。</li></ul>`,22))])}const b=i(r,[["render",m]]),h=JSON.parse('{"path":"/blogs/houduan/Dockerrumen.html","title":"Docker入门指南","lang":"en-US","frontmatter":{"title":"Docker入门指南","date":"2025/06/20","tags":["Docker"],"categories":["后端"]},"headers":[{"level":2,"title":"什么是 Docker？","slug":"什么是-docker","link":"#什么是-docker","children":[]},{"level":2,"title":"Docker 的核心概念","slug":"docker-的核心概念","link":"#docker-的核心概念","children":[]},{"level":2,"title":"快速上手 Docker：三步走","slug":"快速上手-docker-三步走","link":"#快速上手-docker-三步走","children":[{"level":3,"title":"第一步：安装 Docker","slug":"第一步-安装-docker","link":"#第一步-安装-docker","children":[]},{"level":3,"title":"第二步：运行你的第一个 Docker 容器","slug":"第二步-运行你的第一个-docker-容器","link":"#第二步-运行你的第一个-docker-容器","children":[]},{"level":3,"title":"第三步：构建你自己的 Docker 镜像","slug":"第三步-构建你自己的-docker-镜像","link":"#第三步-构建你自己的-docker-镜像","children":[]}]},{"level":2,"title":"常用 Docker 命令","slug":"常用-docker-命令","link":"#常用-docker-命令","children":[]},{"level":2,"title":"接下来你可以学习什么？","slug":"接下来你可以学习什么","link":"#接下来你可以学习什么","children":[]}],"git":{"createdTime":1750413763000,"updatedTime":1750471842000,"contributors":[{"name":"Ryan","email":"2996442165@qq.com","commits":1},{"name":"zhaohubiao","email":"zhaohubiao@pharmolix.com","commits":1}]},"filePathRelative":"blogs/后端/Docker入门.md"}');export{b as comp,h as data};
