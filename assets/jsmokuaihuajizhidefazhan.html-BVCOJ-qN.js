import{_ as s,c as a,a as t,o as e}from"./app-D4UOOi8i.js";const o={};function p(l,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h3 id="_1-javascript-为什么需要模块化及模块化机制的发展进程" tabindex="-1"><a class="header-anchor" href="#_1-javascript-为什么需要模块化及模块化机制的发展进程"><span>1. JavaScript 为什么需要模块化及模块化机制的发展进程</span></a></h3><h4 id="为什么需要模块化" tabindex="-1"><a class="header-anchor" href="#为什么需要模块化"><span>为什么需要模块化？</span></a></h4><p>在 JavaScript 诞生初期，它主要被用作网页上的简单脚本，代码量通常不大，功能也相对简单。然而，随着 Web 应用的复杂化和 Node.js 的出现，JavaScript 开始承担越来越重要的角色，代码规模也急剧膨胀。在这种情况下，原始的 JavaScript 写法（所有代码都可能在全局作用域下）暴露出了诸多问题：</p><ul><li><strong>命名冲突 (Naming Collisions) / 全局变量污染:</strong> 在没有模块化的情况下，不同的 JavaScript 文件中定义的变量和函数默认都在全局作用域中。这很容易导致不同开发者或者不同库之间定义的同名变量或函数相互覆盖，产生难以预料的错误。</li><li><strong>依赖管理困难 (Difficulty in Managing Dependencies):</strong> 项目大了之后，文件之间的依赖关系会变得错综复杂。开发者需要手动维护 <code>&lt;script&gt;</code> 标签的加载顺序，以确保被依赖的模块先于依赖它的模块加载。这种方式不仅繁琐，而且极易出错。</li><li><strong>可维护性差 (Poor Maintainability):</strong> 当所有代码都混合在一起时，理解和修改代码变得非常困难。一个小的改动可能会影响到其他不相关的部分。代码复用也变得不方便。</li><li><strong>可复用性低 (Low Reusability):</strong> 如果想在不同的项目中复用某一段逻辑，往往需要手动复制粘贴代码，这不利于代码的统一管理和更新。</li><li><strong>代码组织混乱 (Disorganized Code Structure):</strong> 缺乏明确的模块边界，使得代码结构松散，难以形成清晰的架构。</li></ul><p><strong>模块化的核心目标就是解决上述问题。</strong> 它允许开发者将程序分解成离散的、可重用的、功能独立的块（即“模块”）。每个模块都有自己的作用域，可以明确地暴露（export）其提供的功能，并显式地声明（import）其依赖的其他模块。</p><p>这样做的好处显而易见：</p><ul><li><strong>避免命名冲突:</strong> 每个模块内部的变量和函数默认是私有的，不会污染全局作用域。</li><li><strong>清晰的依赖关系:</strong> 模块可以明确声明它依赖哪些其他模块，加载器可以根据这些声明自动处理加载顺序。</li><li><strong>提高可维护性:</strong> 代码被组织成独立的模块，修改一个模块通常不会影响其他模块，使得调试和维护更加容易。</li><li><strong>增强可复用性:</strong> 定义良好的模块可以在不同的项目中轻松复用。</li><li><strong>更好的代码组织:</strong> 模块化使得代码结构更加清晰，易于理解和管理。</li></ul><h4 id="模块化机制的发展进程" tabindex="-1"><a class="header-anchor" href="#模块化机制的发展进程"><span>模块化机制的发展进程</span></a></h4><p>JavaScript 的模块化并非一蹴而就，而是经历了一个逐步演进的过程：</p><ol><li><p><strong>原始时代：全局函数和命名空间 (Global Functions and Namespacing)</strong></p><ul><li><strong>方式:</strong> 最早期的“模块化”尝试是通过将代码组织成函数，或者使用对象作为命名空间来避免直接暴露大量全局变量。</li><li><strong>示例:</strong><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 全局函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">moduleAFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 命名空间模式</span></span>
<span class="line"><span class="token keyword">var</span> MyModule <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">featureA</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">featureB</span><span class="token operator">:</span> <span class="token string">&quot;some value&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">MyModule<span class="token punctuation">.</span><span class="token function">featureA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>缺点:</strong> 仍然存在全局污染的风险（例如 <code>MyModule</code> 本身是全局的），依赖关系需要手动管理。</li></ul></li><li><p><strong>IIFE (立即调用函数表达式 - Immediately Invoked Function Expression)</strong></p><ul><li><strong>方式:</strong> 使用 IIFE 创建私有作用域，只将需要暴露的接口挂载到全局对象（如 <code>window</code>）或一个命名空间对象上。</li><li><strong>示例:</strong><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> privateVar <span class="token operator">=</span> <span class="token string">&quot;secret&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  global<span class="token punctuation">.</span>My 공개Module <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">publicMethod</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token string">&quot;Hello from module!&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 或者传入自定义的命名空间</span></span>
<span class="line"></span>
<span class="line">My公开Module<span class="token punctuation">.</span><span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>优点:</strong> 有效地创建了私有作用域，减少了全局污染。</li><li><strong>缺点:</strong> 依赖管理依然是手动通过 <code>&lt;script&gt;</code> 标签顺序控制。模块间的通信相对麻烦。</li></ul></li><li><p><strong>CJS (CommonJS)</strong></p><ul><li><strong>出现背景:</strong> 主要为服务器端 JavaScript（特别是 Node.js）设计。Node.js 的核心理念之一就是模块化。</li><li><strong>特点:</strong><ul><li>同步加载模块 (<code>require</code> 是同步的)。这在服务器端是合适的，因为模块文件通常在本地磁盘，读取速度快。</li><li>模块输出的是值的拷贝（对于基本类型）或引用的拷贝（对于对象）。</li><li><code>require</code> 函数用于导入模块，<code>module.exports</code> 或 <code>exports</code> 对象用于导出模块。</li></ul></li><li><strong>影响:</strong> CommonJS 极大地推动了 JavaScript 在服务器端的发展，并催生了庞大的 npm 生态系统。</li></ul></li><li><p><strong>AMD (Asynchronous Module Definition - 异步模块定义)</strong></p><ul><li><strong>出现背景:</strong> 主要为浏览器端设计，考虑到浏览器加载脚本的异步特性，以及网络延迟问题。同步加载模块会导致页面阻塞。</li><li><strong>代表库:</strong> RequireJS</li><li><strong>特点:</strong><ul><li>异步加载模块。通过 <code>define</code> 函数定义模块，并通过回调函数来处理加载完成后的逻辑。</li><li>推崇依赖前置（在定义模块时声明所有依赖）。</li></ul></li><li><strong>示例 (RequireJS):</strong><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$<span class="token punctuation">,</span> _</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 模块代码</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">myModuleFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> $<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">&quot;  hello &quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> _<span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">doSomething</span><span class="token operator">:</span> myModuleFunction</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>优点:</strong> 解决了浏览器端模块的异步加载问题，避免了页面阻塞。</li><li><strong>缺点:</strong> 语法相对 CJS 啰嗦一些，依赖前置有时不够灵活。</li></ul></li><li><p><strong>CMD (Common Module Definition - 通用模块定义)</strong></p><ul><li><strong>出现背景:</strong> 国内发展起来的规范，试图结合 CJS 的简洁性和 AMD 的异步性。</li><li><strong>代表库:</strong> SeaJS</li><li><strong>特点:</strong><ul><li>也支持异步加载，但推崇依赖就近（在需要时才 <code>require</code>）。</li><li>API 设计更接近 CommonJS。</li></ul></li><li><strong>影响:</strong> 在国内有一定影响力，但随着 ES Modules 的标准化，其使用逐渐减少。</li></ul></li><li><p><strong>UMD (Universal Module Definition - 通用模块定义)</strong></p><ul><li><strong>出现背景:</strong> 为了解决 CJS 和 AMD 不兼容的问题，以及让模块能同时运行在服务器端和浏览器端。</li><li><strong>特点:</strong> UMD 本质上是一个模式，它会检测当前环境支持哪种模块系统（CJS, AMD, 或者全局变量），然后相应地定义模块。</li><li><strong>优点:</strong> 提供了很好的兼容性。</li><li><strong>缺点:</strong> 代码相对冗余，因为需要包含多种模块定义模式的判断逻辑。</li></ul></li><li><p><strong>ESM (ECMAScript Modules - ES Modules / ES6 Modules)</strong></p><ul><li><strong>出现背景:</strong> JavaScript 语言层面官方标准化的模块系统，在 ES6 (ECMAScript 2015) 中引入。</li><li><strong>目标:</strong> 提供一种统一的、简洁的、静态的模块化方案，同时适用于浏览器和服务器端。</li><li><strong>特点:</strong><ul><li><strong>静态结构:</strong> <code>import</code> 和 <code>export</code> 语句必须在模块的顶层，不能在条件语句或函数内部。这使得在编译时就能确定模块的依赖关系（静态分析）。</li><li><strong>异步加载:</strong> 浏览器加载 ESM 默认是异步的（通过 <code>&lt;script type=&quot;module&quot;&gt;</code>）。Node.js 也支持 ESM。</li><li><strong>导出的是值的实时绑定 (live bindings)，而不是拷贝:</strong> 当模块内部的值改变时，导入该值的其他模块可以感知到这个变化。</li><li><code>import</code> 关键字用于导入，<code>export</code> 关键字用于导出。</li><li>支持模块的动态导入 <code>import()</code> 函数，它返回一个 Promise。</li></ul></li><li><strong>影响:</strong> ES Modules 是未来 JavaScript 模块化的标准和趋势，现代浏览器和新版本的 Node.js 都原生支持。它正在逐步取代 CJS 和 AMD 等方案。</li></ul></li></ol><h3 id="_2-commonjs-和-esm-实现模块化的原理和本质区别" tabindex="-1"><a class="header-anchor" href="#_2-commonjs-和-esm-实现模块化的原理和本质区别"><span>2. CommonJS 和 ESM 实现模块化的原理和本质区别</span></a></h3><h4 id="commonjs-cjs" tabindex="-1"><a class="header-anchor" href="#commonjs-cjs"><span>CommonJS (CJS)</span></a></h4><ul><li><p><strong>核心思想/原理:</strong></p><ul><li><strong>同步加载:</strong> <code>require()</code> 函数在执行时会同步地加载并执行指定的模块文件。这意味着在 <code>require()</code> 返回之前，后续代码会被阻塞。</li><li><strong>模块作用域:</strong> 每个文件就是一个模块，拥有自己的作用域。模块内部的变量、函数和类默认是私有的。</li><li><strong>导出 (<code>module.exports</code> / <code>exports</code>):</strong><ul><li>每个模块内部都有一个 <code>module</code> 对象，该对象有一个 <code>exports</code> 属性（<code>module.exports</code>）。</li><li><code>exports</code> 是 <code>module.exports</code> 的一个引用（<code>exports = module.exports</code>）。</li><li>模块通过给 <code>module.exports</code> 赋值或者给 <code>exports</code> 对象添加属性来导出其 API。</li><li><code>require()</code> 返回的是目标模块的 <code>module.exports</code> 的值。</li></ul></li><li><strong>导入 (<code>require</code>):</strong><ul><li><code>require()</code> 函数接收一个模块标识符（通常是文件路径或模块名）。</li><li>它会查找、加载、编译并执行模块代码，然后返回模块的 <code>module.exports</code> 对象。</li><li>模块加载有缓存机制，第一次加载后，后续的 <code>require</code> 同一个模块会直接从缓存中读取。</li></ul></li><li><strong>值的拷贝/引用的拷贝:</strong> 当一个模块 <code>require</code> 另一个模块时，它得到的是目标模块 <code>module.exports</code> 对象的<strong>当前值</strong>。 <ul><li>如果导出的是基本类型（如数字、字符串），那么导入的是这个值的拷贝。后续模块内部对这个值的修改不会影响导入方。</li><li>如果导出的是对象或数组（引用类型），那么导入的是这个对象的引用。模块内部对这个对象的属性修改，会反映到导入方（因为它们指向同一个内存地址）。但是，如果模块内部将 <code>module.exports</code> 重新赋值为一个全新的对象，导入方已经获取的旧引用不会改变。</li></ul></li></ul></li><li><p><strong>适用场景:</strong> 主要用于服务器端（如 Node.js），因为文件系统操作通常很快，同步加载的开销可以接受。</p></li><li><p><strong>示例:</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// math.js</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">PI</span><span class="token operator">:</span> <span class="token constant">PI</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">add</span><span class="token operator">:</span> add</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 或者 exports.PI = PI; exports.add = add; (但不能直接 exports = {...}，这会改变 exports 的指向)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// app.js</span></span>
<span class="line"><span class="token keyword">const</span> math <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同步加载</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="ecmascript-modules-esm" tabindex="-1"><a class="header-anchor" href="#ecmascript-modules-esm"><span>ECMAScript Modules (ESM)</span></a></h4><ul><li><p><strong>核心思想/原理:</strong></p><ul><li><strong>静态结构 (Static Structure):</strong><ul><li><code>import</code> 和 <code>export</code> 语句必须在模块的顶层作用域，不能在条件块或函数调用中。</li><li>这种静态性使得 JavaScript 引擎可以在<strong>编译阶段</strong>就确定模块的依赖关系以及导入导出的名称。这对于代码分析、优化（如 Tree Shaking）和错误检查非常重要。</li></ul></li><li><strong>异步加载/延迟执行:</strong><ul><li>浏览器加载 ES 模块时，使用 <code>&lt;script type=&quot;module&quot;&gt;</code>，其加载和执行是异步的，并且默认是 <code>defer</code> 的，不会阻塞 HTML 解析。</li><li>模块的执行顺序会根据依赖关系自动处理。</li><li>Node.js 加载 ESM 也是异步的。</li></ul></li><li><strong>导出 (<code>export</code>):</strong><ul><li>可以使用 <code>export</code> 关键字导出变量、函数、类。可以有多个 <code>export</code>（命名导出），也可以有一个 <code>export default</code>（默认导出）。</li><li><strong><code>export</code> 导出的是值的实时绑定（live binding），而不是值的拷贝。</strong> 这意味着如果模块内部导出的变量值发生变化，导入该变量的模块会获得更新后的值。</li></ul></li><li><strong>导入 (<code>import</code>):</strong><ul><li>使用 <code>import</code> 关键字从其他模块导入绑定。</li><li>可以导入整个模块对象，也可以只导入特定的命名绑定或默认绑定。</li><li><code>import</code> 声明会被“提升”（hoisted）到模块顶部。</li></ul></li><li><strong>严格模式:</strong> ES 模块自动运行在严格模式 (<code>&#39;use strict&#39;</code>)下。</li><li><strong>模块作用域:</strong> 每个模块都有自己的顶级作用域，<code>this</code> 在模块顶层是 <code>undefined</code>。</li></ul></li><li><p><strong>适用场景:</strong> 浏览器端和服务器端（现代 Node.js 版本）。是 JavaScript 官方推荐的模块化标准。</p></li><li><p><strong>示例:</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// math.js</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  counter<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> counter<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 或者 export default { PI, add }; (默认导出)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// app.js</span></span>
<span class="line"><span class="token comment">// 命名导入</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">PI</span><span class="token punctuation">,</span> add<span class="token punctuation">,</span> increment<span class="token punctuation">,</span> getCounter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 如果是默认导出: import myMath from &#39;./math.js&#39;;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></span>
<span class="line"><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 (体现了实时绑定)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 动态导入 (返回 Promise)</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadUtility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> utilityModule <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./utility.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  utilityModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="本质区别总结" tabindex="-1"><a class="header-anchor" href="#本质区别总结"><span>本质区别总结</span></a></h4><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">CommonJS (CJS)</th><th style="text-align:left;">ECMAScript Modules (ESM)</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>加载方式</strong></td><td style="text-align:left;">同步加载 (<code>require()</code> 是同步的)</td><td style="text-align:left;">异步加载 (设计上是异步的，具体实现依赖环境)</td></tr><tr><td style="text-align:left;"><strong>语法</strong></td><td style="text-align:left;"><code>require()</code> 导入, <code>module.exports</code> 或 <code>exports</code> 导出</td><td style="text-align:left;"><code>import</code> 导入, <code>export</code> 导出</td></tr><tr><td style="text-align:left;"><strong>静态/动态</strong></td><td style="text-align:left;">运行时加载，<code>require</code> 的路径可以是动态计算的</td><td style="text-align:left;">编译时确定依赖关系 (静态结构)，<code>import</code> 路径通常是静态字符串 (动态 <code>import()</code> 除外)</td></tr><tr><td style="text-align:left;"><strong>值的性质</strong></td><td style="text-align:left;">导出的是值的<strong>拷贝</strong> (基本类型) 或<strong>引用的拷贝</strong> (对象)</td><td style="text-align:left;">导出的是<strong>值的实时绑定 (live binding)</strong></td></tr><tr><td style="text-align:left;"><strong><code>this</code> 指向</strong></td><td style="text-align:left;">模块顶层 <code>this</code> 指向当前模块 (<code>module.exports</code> 的别名)</td><td style="text-align:left;">模块顶层 <code>this</code> 是 <code>undefined</code></td></tr><tr><td style="text-align:left;"><strong>严格模式</strong></td><td style="text-align:left;">默认不开启</td><td style="text-align:left;">自动在严格模式下运行</td></tr><tr><td style="text-align:left;"><strong>使用场景</strong></td><td style="text-align:left;">主要用于 Node.js (历史原因)</td><td style="text-align:left;">浏览器和现代 Node.js (未来趋势)</td></tr><tr><td style="text-align:left;"><strong>缓存</strong></td><td style="text-align:left;">模块加载后会被缓存</td><td style="text-align:left;">模块加载后也会被缓存</td></tr><tr><td style="text-align:left;"><strong>模块实例</strong></td><td style="text-align:left;"><code>require</code> 返回的是 <code>module.exports</code> 对象</td><td style="text-align:left;"><code>import</code> 导入的是绑定，不是一个简单的对象拷贝</td></tr><tr><td style="text-align:left;"><strong>tree-shaking</strong></td><td style="text-align:left;">较难实现，因为其动态性</td><td style="text-align:left;">更容易实现，因为其静态结构允许编译时分析哪些代码实际被使用</td></tr></tbody></table><p><strong>最核心的两个区别是：</strong></p><ol><li><strong>加载机制：</strong> CJS 是同步加载，ESM 是异步加载（或设计为支持异步环境）。这直接影响了它们分别在服务器端和浏览器端的适用性。</li><li><strong>值的处理：</strong> CJS 导出的是值的拷贝（或引用的拷贝），而 ESM 导出的是值的实时绑定。这意味着 ESM 中，如果一个模块内部改变了其导出的变量的值，其他导入该变量的模块能感知到这个变化。而在 CJS 中，一旦值被导入，后续模块内部的重新赋值（对基本类型）或整个对象的替换（对引用类型）不会影响已导入的值（除非是修改对象内部的属性）。</li></ol><p>随着 ESM 的标准化和广泛支持，它正在成为 JavaScript 世界统一的模块化方案。虽然 CJS 及其庞大的 npm 生态系统仍然非常重要，但新的项目和库越来越倾向于使用 ESM。Node.js 也提供了对 ESM 的良好支持，并允许 CJS 和 ESM 模块在一定条件下互操作。</p>`,20)]))}const c=s(o,[["render",p]]),r=JSON.parse('{"path":"/blogs/qianduan/jsmokuaihuajizhidefazhan.html","title":"谈谈javaScript模块化机制的发展","lang":"en-US","frontmatter":{"title":"谈谈javaScript模块化机制的发展","date":"2025/05/11","tags":["JavaScript"],"categories":["前端"]},"headers":[{"level":3,"title":"1. JavaScript 为什么需要模块化及模块化机制的发展进程","slug":"_1-javascript-为什么需要模块化及模块化机制的发展进程","link":"#_1-javascript-为什么需要模块化及模块化机制的发展进程","children":[]},{"level":3,"title":"2. CommonJS 和 ESM 实现模块化的原理和本质区别","slug":"_2-commonjs-和-esm-实现模块化的原理和本质区别","link":"#_2-commonjs-和-esm-实现模块化的原理和本质区别","children":[]}],"git":{"createdTime":1747481186000,"updatedTime":1749881065000,"contributors":[{"name":"Ryan","email":"2996442165@qq.com","commits":1}]},"filePathRelative":"blogs/前端/js模块化机制的发展.md"}');export{c as comp,r as data};
