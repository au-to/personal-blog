import{_ as s,c as a,a as p,o as t}from"./app-D4UOOi8i.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h2 id="什么是回溯算法" tabindex="-1"><a class="header-anchor" href="#什么是回溯算法"><span>什么是回溯算法</span></a></h2><p>回溯（Backtracking）是一种暴力搜索方法，常用于解决排列、组合、子集、图遍历等问题。 它的本质是 <strong>递归 + 试探 + 回退</strong>：</p><ol><li><strong>递归</strong>：尝试所有可能的解。</li><li><strong>试探</strong>：当前选择是否符合条件？</li><li><strong>回退</strong>：如果当前选择不符合，撤销选择，尝试别的可能性。</li></ol><p>你可以把回溯算法想象成一个聪明但有点啰嗦的尝试过程，它会穷举所有可能的方案，找到符合条件的答案。</p><p>例如，在游戏闯关（探索迷宫）中：</p><p>想象你在一个迷宫里找出口，每个路口可以选择向左、向右、向前。</p><ul><li>你不知道出口在哪，所以只能每条路都试一试。</li><li>走到死路了，就退回上一步，换一条路试试。</li><li>如果某条路能走通，就继续前进，直到找到出口。</li></ul><p>回溯就像一个不断 <strong>尝试 → 撤销 → 再尝试</strong> 的过程，直到找到所有可行的路线！</p><hr><h2 id="回溯的基本框架" tabindex="-1"><a class="header-anchor" href="#回溯的基本框架"><span>回溯的基本框架</span></a></h2><p>回溯算法通常以<strong>树形结构</strong>进行搜索，每个节点代表一种选择。</p><p><strong>标准回溯模板：</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>满足结束条件<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    记录结果<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>选择 <span class="token keyword">of</span> 选择列表<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    做选择<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">backtrack</span><span class="token punctuation">(</span>新的路径<span class="token punctuation">,</span> 新的选择列表<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    撤销选择<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>路径</strong>：已经做出的选择。</li><li><strong>选择列表</strong>：当前可以做的选择。</li><li><strong>结束条件</strong>：是否满足题目要求。</li></ul><hr><h2 id="经典例子-全排列" tabindex="-1"><a class="header-anchor" href="#经典例子-全排列"><span>经典例子：全排列</span></a></h2><p><strong>题目</strong>：给定一个不含重复数字的数组 <code>nums</code>，返回它的所有可能的排列。</p><p><strong>代码实现：</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">permute</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> res<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> path<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> used<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> res<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">permute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>代码拆解</strong></p><p><strong>递归终止的条件</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当 <code>path</code> 的长度等于 <code>nums</code> 长度，说明已经选完所有元素，构成一个完整排列。</li><li>复制 <code>path</code> 到 <code>res</code>，然后返回，不再继续递归。</li></ul><p><strong><code>for</code> 循环遍历所有可能的选择</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们要尝试每个数是否能放入 <code>path</code>。</li><li>如果 <code>nums[i]</code> 已经在 <code>path</code> 里了（<code>used[i] === true</code>），就跳过。</li></ul><p><strong>选择当前数字，递归进入下一层</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 选择 nums[i]</span></span>
<span class="line">used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 标记为已使用</span></span>
<span class="line"><span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归进入下一层</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>选择 <code>nums[i]</code> 并加入 <code>path</code>，然后进入下一层递归，继续选择下一个数字。</li></ul><p><strong>回溯（撤销选择）</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 撤销选择</span></span>
<span class="line">used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 标记为未使用</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>撤销 <code>path</code> 的最后一个数字，相当于回退一步，尝试其他可能。</li><li>恢复 <code>used[i]</code> 的状态，让 <code>nums[i]</code> 重新可用。</li></ul><hr><p><strong>递归执行的过程</strong></p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss" data-title="scss"><pre><code><span class="line"><span class="token punctuation">(</span>开始<span class="token punctuation">)</span></span>
<span class="line"> ├── 1</span>
<span class="line"> │   ├── 2</span>
<span class="line"> │   │   ├── 3 ✅ [1<span class="token punctuation">,</span>2<span class="token punctuation">,</span>3]</span>
<span class="line"> │   │   ├── 回溯（撤销3）</span>
<span class="line"> │   ├── 3</span>
<span class="line"> │   │   ├── 2 ✅ [1<span class="token punctuation">,</span>3<span class="token punctuation">,</span>2]</span>
<span class="line"> │   │   ├── 回溯（撤销2）</span>
<span class="line"> │   ├── 回溯（撤销1）</span>
<span class="line"> ├── 2</span>
<span class="line"> │   ├── 1</span>
<span class="line"> │   │   ├── 3 ✅ [2<span class="token punctuation">,</span>1<span class="token punctuation">,</span>3]</span>
<span class="line"> │   │   ├── 回溯（撤销3）</span>
<span class="line"> │   ├── 3</span>
<span class="line"> │   │   ├── 1 ✅ [2<span class="token punctuation">,</span>3<span class="token punctuation">,</span>1]</span>
<span class="line"> │   │   ├── 回溯（撤销1）</span>
<span class="line"> │   ├── 回溯（撤销2）</span>
<span class="line"> ├── 3</span>
<span class="line"> │   ├── 1</span>
<span class="line"> │   │   ├── 2 ✅ [3<span class="token punctuation">,</span>1<span class="token punctuation">,</span>2]</span>
<span class="line"> │   │   ├── 回溯（撤销2）</span>
<span class="line"> │   ├── 2</span>
<span class="line"> │   │   ├── 1 ✅ [3<span class="token punctuation">,</span>2<span class="token punctuation">,</span>1]</span>
<span class="line"> │   │   ├── 回溯（撤销1）</span>
<span class="line"> │   ├── 回溯（撤销3）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终结果：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><strong>回溯的核心思想</strong>：</p><ol><li><strong>做选择</strong>：从 <code>nums</code> 中选一个未使用的数，加入 <code>path</code>。</li><li><strong>递归进入下一层</strong>：继续选择下一个数。</li><li><strong>回溯（撤销选择）</strong>：撤销上一步的选择，恢复状态，尝试其他可能。</li></ol><p><strong>适用于所有排列/组合问题：</strong></p><ul><li><strong>排列</strong>：<code>permute([1,2,3]) → n!</code></li><li><strong>组合</strong>：<code>C(n,k)</code> → 选出 <code>k</code> 个数的所有组合。</li><li><strong>子集</strong>：所有可能的选取方式。</li><li><strong>数独求解、八皇后问题</strong> 也都可以用回溯解决！</li></ul>`,44)]))}const i=s(e,[["render",l]]),u=JSON.parse('{"path":"/blogs/shujujiegouyusuanfa/shenruqianchuhuisusuanfa.html","title":"深入浅出回溯算法：通俗易懂 + 代码详解","lang":"en-US","frontmatter":{"title":"深入浅出回溯算法：通俗易懂 + 代码详解","date":"2025/03/26","tags":["算法"],"categories":["数据结构与算法"]},"headers":[{"level":2,"title":"什么是回溯算法","slug":"什么是回溯算法","link":"#什么是回溯算法","children":[]},{"level":2,"title":"回溯的基本框架","slug":"回溯的基本框架","link":"#回溯的基本框架","children":[]},{"level":2,"title":"经典例子：全排列","slug":"经典例子-全排列","link":"#经典例子-全排列","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1743239111000,"updatedTime":1743239111000,"contributors":[{"name":"Ryan","email":"2996442165@qq.com","commits":1}]},"filePathRelative":"blogs/数据结构与算法/深入浅出回溯算法.md"}');export{i as comp,u as data};
