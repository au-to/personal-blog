import{_ as s,c as a,a as p,o as t}from"./app-D4UOOi8i.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<p>在前端开发中，优化网络请求的性能是一个常见且重要的任务。特别是在处理频繁重复请求时，通过引入缓存机制，可以大幅度提高用户体验，减少服务器压力。本文将介绍如何在前端封装一个支持缓存的请求方法，并提供灵活的配置选项，以满足不同场景下的需求。</p><h2 id="一、为什么需要缓存" tabindex="-1"><a class="header-anchor" href="#一、为什么需要缓存"><span>一、为什么需要缓存</span></a></h2><p>在前端应用中，用户的操作往往会触发大量的网络请求，例如数据查询、页面加载等。许多情况下，这些请求返回的数据并不会频繁变化。因此，如果能够缓存这些请求的响应数据，当用户再次发起相同请求时，直接从缓存中读取数据而无需重新发送请求，将显著提升应用的性能。</p><h2 id="二、封装请求方法的思路" tabindex="-1"><a class="header-anchor" href="#二、封装请求方法的思路"><span>二、封装请求方法的思路</span></a></h2><p>封装一个支持缓存的请求方法，关键点在于如何管理缓存的数据。我们需要考虑以下几个方面：</p><ol><li>缓存存储的位置：是存储在 localStorage 还是 sessionStorage？</li><li>缓存的有效期（TTL）：缓存多久后会失效？</li><li>缓存的键生成方式：如何唯一标识一个请求的缓存？</li><li>请求失败后的处理：请求失败时，是否需要清理缓存？</li></ol><h2 id="三、代码实现" tabindex="-1"><a class="header-anchor" href="#三、代码实现"><span>三、代码实现</span></a></h2><p>以下是使用ts封装的支持缓存的请求方法的完整实现：</p><ol><li>定义缓存条目和配置项： 首先，我们定义一个接口 CacheEntry 用来表示缓存条目，其中包括缓存的数据、时间戳和TTL。CacheConfig 接口则定义了缓存的配置项，如存储位置、TTL、缓存键生成器等。</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> axios<span class="token punctuation">,</span> <span class="token punctuation">{</span> AxiosRequestConfig<span class="token punctuation">,</span> AxiosResponse<span class="token punctuation">,</span> AxiosRequestHeaders <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">CacheEntry</span> <span class="token punctuation">{</span></span>
<span class="line">  data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line">  timestamp<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  ttl<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">CacheConfig</span> <span class="token punctuation">{</span></span>
<span class="line">  storage<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;localStorage&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;sessionStorage&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 缓存存储方式</span></span>
<span class="line">  ttl<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  clearOnError<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> <span class="token comment">// 是否在请求失败时清理缓存</span></span>
<span class="line">  cacheKeyGenerator<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 自定义缓存键生成函数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">DEFAULT_TTL</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 默认的缓存有效期</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>缓存键生成器： 接下来，我们实现一个默认的缓存键生成器 defaultCacheKeyGenerator，它通过请求的 method、url、params 和 data 来生成唯一的缓存键。</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">defaultCacheKeyGenerator</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>获取和设置缓存数据： 我们还需要封装获取和设置缓存数据的方法。getCache 方法用于从 localStorage 或 sessionStorage 中获取缓存数据，并判断缓存是否过期；setCache 方法则用于将数据存入缓存。</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">getCache</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> storage<span class="token operator">:</span> <span class="token string">&#39;localStorage&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;sessionStorage&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> cacheEntry <span class="token operator">=</span> window<span class="token punctuation">[</span>storage<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheEntry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> parsedEntry<span class="token operator">:</span> CacheEntry <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>cacheEntry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> isExpired <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> parsedEntry<span class="token punctuation">.</span>timestamp <span class="token operator">&gt;</span> parsedEntry<span class="token punctuation">.</span>ttl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isExpired<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> parsedEntry<span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    window<span class="token punctuation">[</span>storage<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清除过期的缓存</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">setCache</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> storage<span class="token operator">:</span> <span class="token string">&#39;localStorage&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;sessionStorage&#39;</span><span class="token punctuation">,</span> ttl<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> cacheEntry<span class="token operator">:</span> CacheEntry <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    data<span class="token punctuation">,</span></span>
<span class="line">    timestamp<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    ttl</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  window<span class="token punctuation">[</span>storage<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>cacheEntry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>封装请求方法： 最后，我们来封装主请求方法 cachedRequest。在该方法中，首先检查缓存中是否已有数据。如果有且未过期，则直接返回缓存的数据。否则，发起实际的网络请求，并将响应数据缓存起来。</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">cachedRequest</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">,</span> cacheConfig<span class="token operator">:</span> CacheConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>AxiosResponse<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    storage <span class="token operator">=</span> <span class="token string">&#39;localStorage&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    ttl <span class="token operator">=</span> <span class="token constant">DEFAULT_TTL</span><span class="token punctuation">,</span></span>
<span class="line">    clearOnError <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    cacheKeyGenerator <span class="token operator">=</span> defaultCacheKeyGenerator</span>
<span class="line">  <span class="token punctuation">}</span> <span class="token operator">=</span> cacheConfig<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> cacheKey <span class="token operator">=</span> <span class="token function">cacheKeyGenerator</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> cachedData <span class="token operator">=</span> <span class="token function">getCache</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> storage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedData<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> mockHeaders<span class="token operator">:</span> AxiosRequestHeaders <span class="token operator">=</span> config<span class="token punctuation">.</span>headers <span class="token keyword">as</span> AxiosRequestHeaders <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> mockResponse<span class="token operator">:</span> AxiosResponse <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      data<span class="token operator">:</span> cachedData<span class="token punctuation">,</span></span>
<span class="line">      status<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">      statusText<span class="token operator">:</span> <span class="token string">&#39;OK&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      config<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>config<span class="token punctuation">,</span> headers<span class="token operator">:</span> mockHeaders <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      request<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>mockResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">setCache</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">,</span> storage<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> response<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>clearOnError<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      window<span class="token punctuation">[</span>storage<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、使用示例" tabindex="-1"><a class="header-anchor" href="#四、使用示例"><span>四、使用示例</span></a></h2><p>封装好之后，你可以像使用普通的 axios 请求一样使用这个带缓存的请求方法。同时，你可以通过传入不同的 cacheConfig 配置项，来定制缓存行为。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> config<span class="token operator">:</span> AxiosRequestConfig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  url<span class="token operator">:</span> <span class="token string">&#39;/api/data&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> cacheConfig<span class="token operator">:</span> CacheConfig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  storage<span class="token operator">:</span> <span class="token string">&#39;sessionStorage&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 使用 sessionStorage 而不是 localStorage</span></span>
<span class="line">  ttl<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 缓存10分钟</span></span>
<span class="line">  clearOnError<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 请求失败时清理缓存</span></span>
<span class="line">  <span class="token function-variable function">cacheKeyGenerator</span><span class="token operator">:</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">custom-key-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token comment">// 自定义缓存键生成器</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">cachedRequest</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> cacheConfig<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Data:&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>error <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Request failed:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结"><span>五、总结</span></a></h2><p>通过本文，我们介绍了如何封装一个带有缓存功能的请求方法，并了解到如何通过灵活的配置项来自定义缓存策略。这种封装方法不仅能够提高前端应用的性能，还可以显著减少服务器负担。你可以根据自己的需求，进一步扩展和优化这套缓存策略，例如引入内存缓存（Memory Cache）和持久化缓存（Persistent Cache）的结合，构建更加完善的缓存体系。</p>`,21)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/blogs/gongchenghua/ruhefengzhuangyigezhichihuancundeqingqiufangfa.html","title":"如何封装一个支持缓存的请求方法","lang":"en-US","frontmatter":{"title":"如何封装一个支持缓存的请求方法","date":"2024/03/04","tags":["工具链"],"categories":["工程化"]},"headers":[{"level":2,"title":"一、为什么需要缓存","slug":"一、为什么需要缓存","link":"#一、为什么需要缓存","children":[]},{"level":2,"title":"二、封装请求方法的思路","slug":"二、封装请求方法的思路","link":"#二、封装请求方法的思路","children":[]},{"level":2,"title":"三、代码实现","slug":"三、代码实现","link":"#三、代码实现","children":[]},{"level":2,"title":"四、使用示例","slug":"四、使用示例","link":"#四、使用示例","children":[]},{"level":2,"title":"五、总结","slug":"五、总结","link":"#五、总结","children":[]}],"git":{"createdTime":1725460523000,"updatedTime":1749881065000,"contributors":[{"name":"Ryan","email":"2996442165@qq.com","commits":1}]},"filePathRelative":"blogs/工程化/如何封装一个支持缓存的请求方法.md"}');export{i as comp,u as data};
