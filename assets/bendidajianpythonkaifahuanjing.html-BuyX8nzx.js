import{_ as l,c as i,a as p,b as s,d as e,e as t,r as o,o as c}from"./app-D4UOOi8i.js";const r={},d={href:"https://docs.python.org/3/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://flask.palletsprojects.com/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://vitejs.dev/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://vuejs.org/",target:"_blank",rel:"noopener noreferrer"};function m(k,n){const a=o("ExternalLinkIcon");return c(),i("div",null,[n[4]||(n[4]=p(`<p>在开始 Python 项目开发之前，拥有一个干净、可控、可重复的本地开发环境至关重要。本篇博客将详细讲解如何在 <strong>Mac 和 Windows</strong> 系统中分别搭建本地 Python 开发环境，适用于学习、项目开发和前后端联调等场景。</p><hr><h2 id="_1-开发环境准备" tabindex="-1"><a class="header-anchor" href="#_1-开发环境准备"><span>1. 开发环境准备</span></a></h2><h3 id="工具准备-适用于-mac-和-windows" tabindex="-1"><a class="header-anchor" href="#工具准备-适用于-mac-和-windows"><span>工具准备（适用于 Mac 和 Windows）</span></a></h3><ul><li>Python（建议使用 <code>pyenv</code> / <code>官方安装包</code>）</li><li>虚拟环境工具：<code>venv</code>（标准库内置）</li><li>依赖管理：<code>pip</code> + <code>requirements.txt</code></li><li>可选：VS Code、Postman、curl、httpie、git</li></ul><hr><h2 id="_2-macos-开发环境搭建步骤" tabindex="-1"><a class="header-anchor" href="#_2-macos-开发环境搭建步骤"><span>2. macOS 开发环境搭建步骤</span></a></h2><h3 id="_1-安装-homebrew-如未安装" tabindex="-1"><a class="header-anchor" href="#_1-安装-homebrew-如未安装"><span>（1）安装 Homebrew（如未安装）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">/bin/bash <span class="token parameter variable">-c</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="token variable">)</span></span>&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-安装-pyenv-并配置环境变量" tabindex="-1"><a class="header-anchor" href="#_2-安装-pyenv-并配置环境变量"><span>（2）安装 pyenv 并配置环境变量</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">brew <span class="token function">install</span> pyenv</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 <code>~/.zshrc</code> 或 <code>~/.bashrc</code> 中添加：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYENV_ROOT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token environment constant">$HOME</span>/.pyenv&quot;</span></span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$PYENV_ROOT</span>/bin:<span class="token environment constant">$PATH</span>&quot;</span></span>
<span class="line"><span class="token builtin class-name">eval</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>pyenv init <span class="token parameter variable">--path</span><span class="token variable">)</span></span>&quot;</span></span>
<span class="line"><span class="token builtin class-name">eval</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>pyenv init -<span class="token variable">)</span></span>&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">source</span> ~/.zshrc  <span class="token comment"># 或 source ~/.bashrc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-安装并切换-python-版本" tabindex="-1"><a class="header-anchor" href="#_3-安装并切换-python-版本"><span>（3）安装并切换 Python 版本</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pyenv <span class="token function">install</span> <span class="token number">3.11</span>.9</span>
<span class="line">pyenv global <span class="token number">3.11</span>.9</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-创建虚拟环境" tabindex="-1"><a class="header-anchor" href="#_4-创建虚拟环境"><span>（4）创建虚拟环境</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> my-python-project <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> my-python-project</span>
<span class="line">python <span class="token parameter variable">-m</span> venv venv</span>
<span class="line"><span class="token builtin class-name">source</span> venv/bin/activate</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-windows-开发环境搭建步骤" tabindex="-1"><a class="header-anchor" href="#_3-windows-开发环境搭建步骤"><span>3. Windows 开发环境搭建步骤</span></a></h2><h3 id="_1-安装-python-建议使用官网" tabindex="-1"><a class="header-anchor" href="#_1-安装-python-建议使用官网"><span>（1）安装 Python（建议使用官网）</span></a></h3><p>官网下载地址：https://www.python.org/downloads/windows/</p><p>安装时勾选 <strong>“Add Python to PATH”</strong></p><h3 id="_2-创建项目和虚拟环境" tabindex="-1"><a class="header-anchor" href="#_2-创建项目和虚拟环境"><span>（2）创建项目和虚拟环境</span></a></h3><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line">mkdir my-python-project</span>
<span class="line">cd my-python-project</span>
<span class="line">python <span class="token operator">-</span>m venv venv</span>
<span class="line"><span class="token punctuation">.</span>\venv\\Scripts\x07ctivate</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Windows 激活虚拟环境的路径为 <code>venv\\Scripts\x07ctivate</code></p></blockquote><hr><h2 id="_4-安装依赖包" tabindex="-1"><a class="header-anchor" href="#_4-安装依赖包"><span>4. 安装依赖包</span></a></h2><h3 id="_1-安装依赖" tabindex="-1"><a class="header-anchor" href="#_1-安装依赖"><span>（1）安装依赖</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> flask  <span class="token comment"># 例如安装 Flask</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-保存依赖列表" tabindex="-1"><a class="header-anchor" href="#_2-保存依赖列表"><span>（2）保存依赖列表</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip freeze <span class="token operator">&gt;</span> requirements.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-从依赖文件安装" tabindex="-1"><a class="header-anchor" href="#_3-从依赖文件安装"><span>（3）从依赖文件安装</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="_5-本地联调-python-vite-vue" tabindex="-1"><a class="header-anchor" href="#_5-本地联调-python-vite-vue"><span>5. 本地联调（Python + Vite + Vue）</span></a></h2><p>假设：</p><ul><li>Python 服务运行在 <code>http://localhost:5000</code></li><li>前端 Vue 项目运行在 <code>http://localhost:5173</code></li></ul><h3 id="_1-后端处理-cors" tabindex="-1"><a class="header-anchor" href="#_1-后端处理-cors"><span>（1）后端处理 CORS</span></a></h3><p>Flask 示例：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> flask-cors</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask</span>
<span class="line"><span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORS</span>
<span class="line"></span>
<span class="line">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span></span>
<span class="line">CORS<span class="token punctuation">(</span>app<span class="token punctuation">)</span>  <span class="token comment"># 或 CORS(app, origins=[&quot;http://localhost:5173&quot;])</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/api/data&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello from Flask&quot;</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-前端设置-vite-代理-vite-config-ts" tabindex="-1"><a class="header-anchor" href="#_2-前端设置-vite-代理-vite-config-ts"><span>（2）前端设置 Vite 代理（vite.config.ts）</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  server<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    proxy<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        target<span class="token operator">:</span> <span class="token string">&#39;http://localhost:5000&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">rewrite</span><span class="token operator">:</span> path <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-vue-请求接口" tabindex="-1"><a class="header-anchor" href="#_3-vue-请求接口"><span>（3）Vue 请求接口</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 使用 fetch</span></span>
<span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/api/data&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 或使用 axios</span></span>
<span class="line"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_6-常用调试命令" tabindex="-1"><a class="header-anchor" href="#_6-常用调试命令"><span>6. 常用调试命令</span></a></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>source venv/bin/activate</code></td><td>激活虚拟环境（Mac/Linux）</td></tr><tr><td><code>.\venv\\Scripts\x07ctivate</code></td><td>激活虚拟环境（Windows）</td></tr><tr><td><code>pip install -r requirements.txt</code></td><td>安装依赖</td></tr><tr><td><code>pip freeze &gt; requirements.txt</code></td><td>保存依赖</td></tr><tr><td><code>python app.py</code></td><td>启动后端服务</td></tr><tr><td><code>npm run dev</code></td><td>启动前端 Vite 项目</td></tr></tbody></table><hr><h2 id="_7-总结建议" tabindex="-1"><a class="header-anchor" href="#_7-总结建议"><span>7. 总结建议</span></a></h2><ul><li>使用虚拟环境隔离依赖</li><li>后端配置好 CORS，避免跨域问题</li><li>前端通过 Vite 代理实现简洁请求路径</li><li>联调时使用浏览器控制台查看请求/响应</li><li>最终部署时请关闭通配 CORS（限制来源）</li></ul><hr><h2 id="_8-延伸阅读" tabindex="-1"><a class="header-anchor" href="#_8-延伸阅读"><span>8. 延伸阅读</span></a></h2>`,55)),s("ul",null,[s("li",null,[s("a",d,[n[0]||(n[0]=e("Python 官方文档",-1)),t(a)])]),s("li",null,[s("a",u,[n[1]||(n[1]=e("Flask 官方文档",-1)),t(a)])]),s("li",null,[s("a",h,[n[2]||(n[2]=e("Vite 官方文档",-1)),t(a)])]),s("li",null,[s("a",v,[n[3]||(n[3]=e("Vue 3 官方文档",-1)),t(a)])])])])}const g=l(r,[["render",m]]),_=JSON.parse('{"path":"/blogs/houduan/bendidajianpythonkaifahuanjing.html","title":"本地搭建 Python 开发环境完整指南","lang":"en-US","frontmatter":{"title":"本地搭建 Python 开发环境完整指南","date":"2025/07/02","tags":["python"],"categories":["后端"]},"headers":[{"level":2,"title":"1. 开发环境准备","slug":"_1-开发环境准备","link":"#_1-开发环境准备","children":[{"level":3,"title":"工具准备（适用于 Mac 和 Windows）","slug":"工具准备-适用于-mac-和-windows","link":"#工具准备-适用于-mac-和-windows","children":[]}]},{"level":2,"title":"2. macOS 开发环境搭建步骤","slug":"_2-macos-开发环境搭建步骤","link":"#_2-macos-开发环境搭建步骤","children":[{"level":3,"title":"（1）安装 Homebrew（如未安装）","slug":"_1-安装-homebrew-如未安装","link":"#_1-安装-homebrew-如未安装","children":[]},{"level":3,"title":"（2）安装 pyenv 并配置环境变量","slug":"_2-安装-pyenv-并配置环境变量","link":"#_2-安装-pyenv-并配置环境变量","children":[]},{"level":3,"title":"（3）安装并切换 Python 版本","slug":"_3-安装并切换-python-版本","link":"#_3-安装并切换-python-版本","children":[]},{"level":3,"title":"（4）创建虚拟环境","slug":"_4-创建虚拟环境","link":"#_4-创建虚拟环境","children":[]}]},{"level":2,"title":"3. Windows 开发环境搭建步骤","slug":"_3-windows-开发环境搭建步骤","link":"#_3-windows-开发环境搭建步骤","children":[{"level":3,"title":"（1）安装 Python（建议使用官网）","slug":"_1-安装-python-建议使用官网","link":"#_1-安装-python-建议使用官网","children":[]},{"level":3,"title":"（2）创建项目和虚拟环境","slug":"_2-创建项目和虚拟环境","link":"#_2-创建项目和虚拟环境","children":[]}]},{"level":2,"title":"4. 安装依赖包","slug":"_4-安装依赖包","link":"#_4-安装依赖包","children":[{"level":3,"title":"（1）安装依赖","slug":"_1-安装依赖","link":"#_1-安装依赖","children":[]},{"level":3,"title":"（2）保存依赖列表","slug":"_2-保存依赖列表","link":"#_2-保存依赖列表","children":[]},{"level":3,"title":"（3）从依赖文件安装","slug":"_3-从依赖文件安装","link":"#_3-从依赖文件安装","children":[]}]},{"level":2,"title":"5. 本地联调（Python + Vite + Vue）","slug":"_5-本地联调-python-vite-vue","link":"#_5-本地联调-python-vite-vue","children":[{"level":3,"title":"（1）后端处理 CORS","slug":"_1-后端处理-cors","link":"#_1-后端处理-cors","children":[]},{"level":3,"title":"（2）前端设置 Vite 代理（vite.config.ts）","slug":"_2-前端设置-vite-代理-vite-config-ts","link":"#_2-前端设置-vite-代理-vite-config-ts","children":[]},{"level":3,"title":"（3）Vue 请求接口","slug":"_3-vue-请求接口","link":"#_3-vue-请求接口","children":[]}]},{"level":2,"title":"6. 常用调试命令","slug":"_6-常用调试命令","link":"#_6-常用调试命令","children":[]},{"level":2,"title":"7. 总结建议","slug":"_7-总结建议","link":"#_7-总结建议","children":[]},{"level":2,"title":"8. 延伸阅读","slug":"_8-延伸阅读","link":"#_8-延伸阅读","children":[]}],"git":{"createdTime":1751449068000,"updatedTime":1751449068000,"contributors":[{"name":"zhaohubiao","email":"zhaohubiao@pharmolix.com","commits":1}]},"filePathRelative":"blogs/后端/本地搭建python开发环境.md"}');export{g as comp,_ as data};
