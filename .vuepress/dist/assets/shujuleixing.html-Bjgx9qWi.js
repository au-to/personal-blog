import{_ as e,o as i,c as l,a as s}from"./app-DUxVYwVX.js";const n={},a=s(`<h3 id="关于js" tabindex="-1"><a class="header-anchor" href="#关于js"><span>关于js</span></a></h3><ul><li>js是一门单线程的脚本语言，任何的异步行为都是使用同步方法模拟的</li><li>广义的任务分为同步任务与异步任务</li><li>同步和异步任务最后都会到主线程中执行</li><li>不同类型的任务在真正被执行前会进入不同的任务队列</li></ul><h3 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环"><span>事件循环</span></a></h3><ol><li>所有任务都在主线程上执行，形成一个执行栈</li><li>在主线程之外还存在一个任务队列,系统把异步任务放到任务队列中，然后主线程继续执行后续的任务</li><li>一旦执行栈中所有的任务执行完毕，系统就会读取任务队列。如果这时异步任务已结束等待状态， 就会从任务队列进入执行栈，恢复执行</li><li>重复上面的3步</li></ol><h3 id="宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#宏任务和微任务"><span>宏任务和微任务</span></a></h3><ul><li>根据任务队列中任务的不同，划分为宏任务和微任务</li><li>事件循环由宏任务和执行宏任务期间产生的微任务组成</li><li>主线程在执行完本次宏任务后，会立即执行入队的微任务</li><li>在下一轮事件循环中，再从宏任务开始，相当于给了微任务一次插队的机会</li><li>常见的宏任务有：script、setTimeOut、setInterval、setImmediate、I/O</li><li>常见的微任务有：process.nextTick、Promise、Object.observe、MutationObserver</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">setTimeout(function() {</span>
<span class="line">    console.log(1);</span>
<span class="line">})</span>
<span class="line">new Promise(function(resolve) {</span>
<span class="line">    console.log(2);</span>
<span class="line">}).then(function() {</span>
<span class="line">    console.log(3);</span>
<span class="line">})</span>
<span class="line">console.log(4);</span>
<span class="line">// 输出结果；2—4-3-1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行过程：</p><ul><li>这段代码作为宏任务，进入主线程</li><li>先遇到<code>setTimeout</code>，将其回调函数注册后分发到宏任务Event Queue</li><li>接下来遇到了<code>Promise</code>，<code>new Promise</code>立即执行，<code>then</code>函数分发到微任务Event Queue</li><li>遇到<code>console.log()</code>，立即执行</li><li>整体代码script作为第一个宏任务执行结束</li><li>接着执行微任务：then</li><li>第一轮事件循环结束</li><li>开始第二轮循环，从宏任务Event Queue开始。1发现宏任务Event Queue中<code>setTimeout</code>对应的回调函数，立即执行</li><li>结束</li></ul>`,10),t=[a];function c(o,d){return i(),l("div",null,t)}const u=e(n,[["render",c],["__file","shujuleixing.html.vue"]]),h=JSON.parse('{"path":"/blogs/javaScript/shujuleixing.html","title":"js的事件循环机制","lang":"en-US","frontmatter":{"title":"js的事件循环机制","date":"2024/07/15","tags":["javaScript"],"categories":["javaScript"]},"headers":[{"level":3,"title":"关于js","slug":"关于js","link":"#关于js","children":[]},{"level":3,"title":"事件循环","slug":"事件循环","link":"#事件循环","children":[]},{"level":3,"title":"宏任务和微任务","slug":"宏任务和微任务","link":"#宏任务和微任务","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}],"git":{"createdTime":1720774567000,"updatedTime":1721055804000,"contributors":[{"name":"“zhaohb”","email":"“2996442165@qq.com”","commits":2},{"name":"zhaohubiao","email":"zhaohubiao.zhb@sunyur.com","commits":1}]},"filePathRelative":"blogs/javaScript/数据类型.md"}');export{u as comp,h as data};
